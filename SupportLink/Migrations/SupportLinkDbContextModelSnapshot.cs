// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportLink.Data;

#nullable disable

namespace SupportLink.Migrations
{
    [DbContext(typeof(SupportLinkDbContext))]
    partial class SupportLinkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SupportLink.Models.AccountUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecializationCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SpecializationCategoryId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SupportLink.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SupportId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupportId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SupportLink.Models.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FileTypeId");

                    b.ToTable("FileTypes");

                    b.HasData(
                        new
                        {
                            FileTypeId = 1,
                            Name = "Image"
                        },
                        new
                        {
                            FileTypeId = 2,
                            Name = "Document"
                        },
                        new
                        {
                            FileTypeId = 3,
                            Name = "PDF"
                        },
                        new
                        {
                            FileTypeId = 4,
                            Name = "Video"
                        },
                        new
                        {
                            FileTypeId = 5,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("SupportLink.Models.IssueCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("IssueCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Technical issues",
                            Name = "Technical"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Billing and payments",
                            Name = "Billing"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Account-related issues",
                            Name = "Account"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "General questions",
                            Name = "General Inquiry"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "World Bank questions",
                            Name = "World Bank issues"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Other types of issues",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SupportLink.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("SupportLink.Models.SupportTicket", b =>
                {
                    b.Property<int>("SupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportId"));

                    b.Property<int?>("AssignedId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SupportId");

                    b.HasIndex("AssignedId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("SupportLink.Models.TicketStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Ticket just created",
                            Name = "New"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Assigned to an agent",
                            Name = "Assigned"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Work in progress",
                            Name = "InProgress"
                        },
                        new
                        {
                            StatusId = 4,
                            Description = "Issue Solved",
                            Name = "Solved"
                        },
                        new
                        {
                            StatusId = 5,
                            Description = "Ticket closed",
                            Name = "Closed"
                        },
                        new
                        {
                            StatusId = 6,
                            Description = "Un Assigned to an agent",
                            Name = "UnAssigned"
                        });
                });

            modelBuilder.Entity("SupportLink.Models.TicketUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupportId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TicketUpdates");
                });

            modelBuilder.Entity("SupportLink.Models.AccountUser", b =>
                {
                    b.HasOne("SupportLink.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportLink.Models.IssueCategory", "SpecializationCategory")
                        .WithMany()
                        .HasForeignKey("SpecializationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");

                    b.Navigation("SpecializationCategory");
                });

            modelBuilder.Entity("SupportLink.Models.Feedback", b =>
                {
                    b.HasOne("SupportLink.Models.SupportTicket", "Ticket")
                        .WithOne("Feedback")
                        .HasForeignKey("SupportLink.Models.Feedback", "SupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportLink.Models.AccountUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportLink.Models.SupportTicket", b =>
                {
                    b.HasOne("SupportLink.Models.AccountUser", "AssignedAgent")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SupportLink.Models.IssueCategory", "IssueCategory")
                        .WithMany("SupportTickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SupportLink.Models.FileType", "FileType")
                        .WithMany("SupportTickets")
                        .HasForeignKey("FileTypeId");

                    b.HasOne("SupportLink.Models.Organization", "Organization")
                        .WithMany("Tickets")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportLink.Models.TicketStatus", "Status")
                        .WithMany("SupportTickets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SupportLink.Models.AccountUser", "AccountUser")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountUser");

                    b.Navigation("AssignedAgent");

                    b.Navigation("FileType");

                    b.Navigation("IssueCategory");

                    b.Navigation("Organization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SupportLink.Models.TicketUpdate", b =>
                {
                    b.HasOne("SupportLink.Models.SupportTicket", "Ticket")
                        .WithMany("Updates")
                        .HasForeignKey("SupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportLink.Models.AccountUser", "UpdatedBy")
                        .WithMany("Updates")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SupportLink.Models.AccountUser", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedTickets");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("SupportLink.Models.FileType", b =>
                {
                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("SupportLink.Models.IssueCategory", b =>
                {
                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("SupportLink.Models.Organization", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SupportLink.Models.SupportTicket", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("SupportLink.Models.TicketStatus", b =>
                {
                    b.Navigation("SupportTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
